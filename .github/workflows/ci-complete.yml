name: CI - Complete Quality Check

on:
  pull_request:
    branches: [ "main" ]

env:
  # Establece el perfil SSL para los tests que se ejecutan con @SpringBootTest
  SPRING_PROFILES_ACTIVE: ssl

jobs:
  backend-complete:
    runs-on: ubuntu-latest
    name: Backend Complete Quality Check

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Build backend
        working-directory: backend
        run: mvn clean compile -B

      - name: Run backend unit tests
        working-directory: backend
        run: mvn test -Dtest="*Unit*,*ServiceTest*" -Dsurefire.failIfNoSpecifiedTests=false -B

      - name: Run backend integration tests
        working-directory: backend
        run: mvn test -Dtest="*System*,*ApiTest*" -Dsurefire.failIfNoSpecifiedTests=false -B


  selenium-tests: 
    runs-on: ubuntu-latest
    name: Selenium E2E Tests 
    needs: [backend-complete] # Asegura que los tests básicos pasen antes de correr los E2E

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Install Chrome for Selenium
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Start Backend and Wait for Health
        working-directory: backend
        run: |
          # Inicia el backend en segundo plano con el perfil SSL
          nohup mvn spring-boot:run -Dspring-boot.run.profiles=ssl > backend.log 2>&1 &
          echo "Waiting for backend to become healthy..."
          # BUCLE ROBUSTO: Espera hasta 90 segundos a que el backend responda correctamente.
          # --insecure (-k): Acepta el certificado SSL autofirmado de localhost.
          # --fail: Hace que curl falle si el código de estado no es 2xx.
          # Esto detendrá el workflow si el backend no arranca, mostrando un error claro.
          timeout 90 bash -c 'until curl --fail --insecure https://localhost:443/api/v1/transactions; do sleep 5; done'
          echo "Backend is up and running on HTTPS."

      - name: Build and Start Frontend and Wait for Health
        working-directory: frontend
        run: |
          npm ci
          nohup npx ng serve --host 0.0.0.0 --port 4200 --disable-host-check > frontend.log 2>&1 &
          echo "Waiting for frontend to start..."
          # BUCLE ROBUSTO: Espera hasta 60 segundos a que el frontend responda.
          timeout 60 bash -c 'until curl --fail http://localhost:4200; do sleep 5; done'
          echo "Frontend is up and running."

      - name: Run Selenium Tests
        working-directory: backend
        run: mvn test -Dtest="HomePageTest" -B

      - name: Show logs on failure
        # PASO CRÍTICO DE DEBUG: Si el paso anterior falla, este se ejecuta.
        if: failure()
        run: |
          echo "--- Backend logs (last 100 lines) ---"
          tail -n 100 backend/backend.log
          echo "--- Frontend logs (last 100 lines) ---"
          tail -n 100 frontend/frontend.log


  quality-gate:
    runs-on: ubuntu-latest
    name: Quality Gate
    # Se ejecuta solo si todos los jobs anteriores han tenido éxito.
    needs: [backend-complete, selenium-tests]
    
    steps:
      - name: Quality Gate Passed
        run: echo "All quality checks passed. Ready to merge!"